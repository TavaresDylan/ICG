swagger: "2.0"
info:
  description: "API of ICG app"
  version: "1.0.0"
  title: "Swagger ICG"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "tavares.dylan03@gmail.com"
  license:
    name: "MIT"
    url: "https://choosealicense.com/licenses/mit/"
host: "icg.swagger.io"
basePath: "/v2"
tags:
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about Djoser"
    url: "https://djoser.readthedocs.io"
- name: "auth"
  description: "Operations about authentification system"
  externalDocs:
    description: "Find out more about Djoser"
    url: "https://djoser.readthedocs.io"
- name: "folder"
  description: "Operations about folder"
- name: "photo"
  description: "Operations about photo"
schemes:
- "https"
- "http"
paths:
  /api/v1/users/:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: ""
      operationId: "createUser"
      consume:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - name: "username"
          required: true
          description: "Username to be registrated"
          type: "string"
        - name : "password"
          required: true
          description: "Password of user to be registrated"
          type: "string"
        - name: "email"
          required: true
          description: "Email of user to be registrated"
          type: "string"
        - name: "confirmPassword"
          required: true
          description: "Confirmation of user password"
          type: "string"
        - name: "checkbox"
          required: true
          description: "Agreement of terms of use"
          type: "boolean"
      responses:
        200:
          description: "User succefully created"
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: "string"
                    description: "The username"
                  email:
                    type: string
                    description: "The email"
        400:
          description: "Bad request"
  api/v1/users/:
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /api/v1/users/me/:
    get:
      tags:
      - "user"
      summary: "Get the logged in user infos."
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  api/v1/jwt/create/:
    post:
      tags:
      - "auth"
      summary: "Log user"
      description: "Logs a user in and return a JSON web token and a refresh token."
      operationId: "Login"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  api/v1/jwt/refresh/:
    post:
      tags:
      - "auth"
      summary: "Refresh JSON Web Token"
      description: "Send a request to refresh JSON web token with timeout JWT"
      operationId: "createUsersWithListInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  api/v1/jwt/logout:
    get:
      tags:
      - "auth"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  api/v1/photo:
    post:
      tags:
      - "photo"
      summary: "Uploads photo"
      consumes:
      - "multipart/form-data"
      description: ""
      operationId: "UploadPhoto"
      parameters:
      - name: "file"
        required: true
        description: "File to upload"
        type: "file"
      - name: "name"
        required: true
        description: "Name of the file"
        type: "string"
      - name: "image_url"
        required: true
        description: "URL of image to upload"
        type: "string"
      - name: "size"
        required: true
        description: "Size of image to upload"
        type: "integer"
        format: "int64"
      - name: "description"
        required: false
        description: "Optionnal manual description of image"
        type: "string"
      - name: "folder_id"
        required: true
        description: "The ID of folder to link"
        type: "integer"
        format: "int64"
      produces:
      - "application/json"
      responses:
        "201":
          description: "created"
        "400":
          description: "bad request"
  api/v1/photo/{page}/{folderId}:
    get:
      tags:
      - "photo"
      summary: "Get photo by page number and folder_id"
      description: "Get photo by page number and folder_id"
      operationId: "getPhoto"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of photos owned by user by page"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Photo"
      responses:
        default:
          description: "successful operation"
  api/v1/photo/{name}:
    get:
      tags:
      - "photo"
      summary: "Get photo by name"
  api/v1/photo/{id}:
    delete:
      tags:
      - "photo"
      summary: "Delete photo by id"
      description: ""
      operationId: "deletePhoto"
      consume:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - name: "id"
          required: true
          description: "Image id to delete"
          type: "integer"
          format: "int64"
      responses:
        204:
          description: "no content"
        400:
          description: "bad request"
    patch:
      tags:
      - "photo"
      summary: "Update photo by id"
      description: ""
      operationId: "updatePhoto"
      consume:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "updated"
        400:
          description: "bad request"
  api/v1/folder:
    post:
      tags:
      - "folder"
      summary: "Create folder"
      description: ""
      operationId: "createFolder"
      consume:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        required: true
        description: "Folder name to create"
        type: "string"
      - name: "user_id"
        required: true
        description: "User id of owner"
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "created"
        409:
          description: "folder already exists"
        400:
          description: "bad request"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
  Photo:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      path:
        type: "string"
      name:
        type: "string"
      uploaded_at:
        type: "datetime"
      user_id:
        type: int32
      folder_id:
        type: int32
      size:
        type: int32
      descriptions:
        type: "string"
  Folder:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      created_at:
        type: "datetime"
      user_id:
        type: int32
      size:
        type: int32
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
